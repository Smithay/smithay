(function() {
    var type_impls = Object.fromEntries([["smithay",[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Coordinate-for-i64\" class=\"impl\"><a class=\"src rightside\" href=\"src/smithay/utils/geometry.rs.html#254-260\">Source</a><a href=\"#impl-Coordinate-for-i64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"smithay/utils/trait.Coordinate.html\" title=\"trait smithay::utils::Coordinate\">Coordinate</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i64.html\">i64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedconstant.ZERO\" class=\"associatedconstant trait-impl\"><a class=\"src rightside\" href=\"src/smithay/utils/geometry.rs.html#254-260\">Source</a><a href=\"#associatedconstant.ZERO\" class=\"anchor\">§</a><h4 class=\"code-header\">const <a href=\"smithay/utils/trait.Coordinate.html#associatedconstant.ZERO\" class=\"constant\">ZERO</a>: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i64.html\">i64</a> = 0i64</h4></section></summary><div class='docblock'>A Coordinate that is 0</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.downscale\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/smithay/utils/geometry.rs.html#254-260\">Source</a><a href=\"#method.downscale\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"smithay/utils/trait.Coordinate.html#tymethod.downscale\" class=\"fn\">downscale</a>(self, scale: Self) -&gt; Self</h4></section></summary><div class='docblock'>Downscale the coordinate</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.upscale\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/smithay/utils/geometry.rs.html#254-260\">Source</a><a href=\"#method.upscale\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"smithay/utils/trait.Coordinate.html#tymethod.upscale\" class=\"fn\">upscale</a>(self, scale: Self) -&gt; Self</h4></section></summary><div class='docblock'>Upscale the coordinate</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_f64\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/smithay/utils/geometry.rs.html#254-260\">Source</a><a href=\"#method.to_f64\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"smithay/utils/trait.Coordinate.html#tymethod.to_f64\" class=\"fn\">to_f64</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.f64.html\">f64</a></h4></section></summary><div class='docblock'>Convert the coordinate to a f64</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_f64\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/smithay/utils/geometry.rs.html#254-260\">Source</a><a href=\"#method.from_f64\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"smithay/utils/trait.Coordinate.html#tymethod.from_f64\" class=\"fn\">from_f64</a>(v: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.f64.html\">f64</a>) -&gt; Self</h4></section></summary><div class='docblock'>Convert to this coordinate from a f64</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.non_negative\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/smithay/utils/geometry.rs.html#254-260\">Source</a><a href=\"#method.non_negative\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"smithay/utils/trait.Coordinate.html#tymethod.non_negative\" class=\"fn\">non_negative</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Test if the coordinate is not negative</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.abs\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/smithay/utils/geometry.rs.html#254-260\">Source</a><a href=\"#method.abs\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"smithay/utils/trait.Coordinate.html#tymethod.abs\" class=\"fn\">abs</a>(self) -&gt; Self</h4></section></summary><div class='docblock'>Returns the absolute value of this coordinate</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.saturating_add\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/smithay/utils/geometry.rs.html#254-260\">Source</a><a href=\"#method.saturating_add\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"smithay/utils/trait.Coordinate.html#tymethod.saturating_add\" class=\"fn\">saturating_add</a>(self, other: Self) -&gt; Self</h4></section></summary><div class='docblock'>Saturating integer addition. Computes self + other, saturating at the numeric bounds instead of overflowing.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.saturating_sub\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/smithay/utils/geometry.rs.html#254-260\">Source</a><a href=\"#method.saturating_sub\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"smithay/utils/trait.Coordinate.html#tymethod.saturating_sub\" class=\"fn\">saturating_sub</a>(self, other: Self) -&gt; Self</h4></section></summary><div class='docblock'>Saturating integer subtraction. Computes self - other, saturating at the numeric bounds instead of overflowing.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.saturating_mul\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/smithay/utils/geometry.rs.html#254-260\">Source</a><a href=\"#method.saturating_mul\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"smithay/utils/trait.Coordinate.html#tymethod.saturating_mul\" class=\"fn\">saturating_mul</a>(self, other: Self) -&gt; Self</h4></section></summary><div class='docblock'>Saturating integer multiplication. Computes self * other, saturating at the numeric bounds instead of overflowing.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.min\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/smithay/utils/geometry.rs.html#48-54\">Source</a><a href=\"#method.min\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"smithay/utils/trait.Coordinate.html#method.min\" class=\"fn\">min</a>(self, other: Self) -&gt; Self</h4></section></summary><div class='docblock'>Compare and return the smaller one</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.max\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/smithay/utils/geometry.rs.html#57-63\">Source</a><a href=\"#method.max\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"smithay/utils/trait.Coordinate.html#method.max\" class=\"fn\">max</a>(self, other: Self) -&gt; Self</h4></section></summary><div class='docblock'>Compare and return the larger one</div></details></div></details>","Coordinate","smithay::backend::renderer::gles::ffi::types::GLint64","smithay::backend::renderer::gles::ffi::types::GLint64EXT"]]]]);
    if (window.register_type_impls) {
        window.register_type_impls(type_impls);
    } else {
        window.pending_type_impls = type_impls;
    }
})()
//{"start":55,"fragment_lengths":[7306]}