(function() {
    var type_impls = Object.fromEntries([["smithay",[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AbsDiffEq-for-RefCell%3CT%3E\" class=\"impl\"><a href=\"#impl-AbsDiffEq-for-RefCell%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; AbsDiffEq for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/cell/struct.RefCell.html\" title=\"struct core::cell::RefCell\">RefCell</a>&lt;T&gt;<div class=\"where\">where\n    T: AbsDiffEq + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Epsilon\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Epsilon\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Epsilon</a> = &lt;T as AbsDiffEq&gt;::Epsilon</h4></section></summary><div class='docblock'>Used for specifying relative comparisons.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.default_epsilon\" class=\"method trait-impl\"><a href=\"#method.default_epsilon\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">default_epsilon</a>() -&gt; &lt;T as AbsDiffEq&gt;::Epsilon</h4></section></summary><div class='docblock'>The default tolerance to use when testing values that are close together. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.abs_diff_eq\" class=\"method trait-impl\"><a href=\"#method.abs_diff_eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">abs_diff_eq</a>(\n    &amp;self,\n    other: &amp;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/cell/struct.RefCell.html\" title=\"struct core::cell::RefCell\">RefCell</a>&lt;T&gt;,\n    epsilon: &lt;T as AbsDiffEq&gt;::Epsilon,\n) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>A test for equality that uses the absolute difference to compute the approximate\nequality of two numbers.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.abs_diff_ne\" class=\"method trait-impl\"><a href=\"#method.abs_diff_ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">abs_diff_ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>, epsilon: Self::Epsilon) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>The inverse of [<code>AbsDiffEq::abs_diff_eq</code>].</div></details></div></details>","AbsDiffEq","smithay::wayland::commit_timing::CommitTimerStateUserData","smithay::wayland::fractional_scale::FractionalScaleStateUserData"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clone-for-RefCell%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cell.rs.html#1307\">Source</a></span><a href=\"#impl-Clone-for-RefCell%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/cell/struct.RefCell.html\" title=\"struct core::cell::RefCell\">RefCell</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/cell.rs.html#1313\">Source</a><a href=\"#method.clone\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/cell/struct.RefCell.html\" title=\"struct core::cell::RefCell\">RefCell</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if the value is currently mutably borrowed.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/cell.rs.html#1322\">Source</a><a href=\"#method.clone_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: &amp;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/cell/struct.RefCell.html\" title=\"struct core::cell::RefCell\">RefCell</a>&lt;T&gt;)</h4></section></summary><div class=\"docblock\"><h5 id=\"panics-1\"><a class=\"doc-anchor\" href=\"#panics-1\">§</a>Panics</h5>\n<p>Panics if <code>source</code> is currently mutably borrowed.</p>\n</div></details></div></details>","Clone","smithay::wayland::commit_timing::CommitTimerStateUserData","smithay::wayland::fractional_scale::FractionalScaleStateUserData"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-RefCell%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/fmt/mod.rs.html#2935\">Source</a></span><a href=\"#impl-Debug-for-RefCell%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/cell/struct.RefCell.html\" title=\"struct core::cell::RefCell\">RefCell</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/fmt/mod.rs.html#2936\">Source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","smithay::wayland::commit_timing::CommitTimerStateUserData","smithay::wayland::fractional_scale::FractionalScaleStateUserData"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Default-for-RefCell%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const unstable\">1.0.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/143894\" title=\"Tracking issue for const_default\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cell.rs.html#1329\">Source</a></span><a href=\"#impl-Default-for-RefCell%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a> for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/cell/struct.RefCell.html\" title=\"struct core::cell::RefCell\">RefCell</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.default\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/cell.rs.html#1332\">Source</a><a href=\"#method.default\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html#tymethod.default\" class=\"fn\">default</a>() -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/cell/struct.RefCell.html\" title=\"struct core::cell::RefCell\">RefCell</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Creates a <code>RefCell&lt;T&gt;</code>, with the <code>Default</code> value for T.</p>\n</div></details></div></details>","Default","smithay::wayland::commit_timing::CommitTimerStateUserData","smithay::wayland::fractional_scale::FractionalScaleStateUserData"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CT%3E-for-RefCell%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.12.0, const unstable\">1.12.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/143773\" title=\"Tracking issue for const_convert\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cell.rs.html#1407\">Source</a></span><a href=\"#impl-From%3CT%3E-for-RefCell%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;T&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/cell/struct.RefCell.html\" title=\"struct core::cell::RefCell\">RefCell</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/cell.rs.html#1409\">Source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(t: T) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/cell/struct.RefCell.html\" title=\"struct core::cell::RefCell\">RefCell</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Creates a new <code>RefCell&lt;T&gt;</code> containing the given value.</p>\n</div></details></div></details>","From<T>","smithay::wayland::commit_timing::CommitTimerStateUserData","smithay::wayland::fractional_scale::FractionalScaleStateUserData"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Ord-for-RefCell%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.10.0\">1.10.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cell.rs.html#1395\">Source</a></span><a href=\"#impl-Ord-for-RefCell%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html\" title=\"trait core::cmp::Ord\">Ord</a> for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/cell/struct.RefCell.html\" title=\"struct core::cell::RefCell\">RefCell</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html\" title=\"trait core::cmp::Ord\">Ord</a> + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/cell.rs.html#1400\">Source</a><a href=\"#method.cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#tymethod.cmp\" class=\"fn\">cmp</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/cell/struct.RefCell.html\" title=\"struct core::cell::RefCell\">RefCell</a>&lt;T&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a></h4></section></summary><div class=\"docblock\"><h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if the value in either <code>RefCell</code> is currently mutably borrowed.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.max\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1021-1023\">Source</a></span><a href=\"#method.max\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#method.max\" class=\"fn\">max</a>(self, other: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Compares and returns the maximum of two values. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#method.max\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.min\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1060-1062\">Source</a></span><a href=\"#method.min\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#method.min\" class=\"fn\">min</a>(self, other: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Compares and returns the minimum of two values. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#method.min\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clamp\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.50.0\">1.50.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#1086-1088\">Source</a></span><a href=\"#method.clamp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#method.clamp\" class=\"fn\">clamp</a>(self, min: Self, max: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Restrict a value to a certain interval. <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Ord.html#method.clamp\">Read more</a></div></details></div></details>","Ord","smithay::wayland::commit_timing::CommitTimerStateUserData","smithay::wayland::fractional_scale::FractionalScaleStateUserData"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq-for-RefCell%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cell.rs.html#1338\">Source</a></span><a href=\"#impl-PartialEq-for-RefCell%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a> for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/cell/struct.RefCell.html\" title=\"struct core::cell::RefCell\">RefCell</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a> + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/cell.rs.html#1343\">Source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/cell/struct.RefCell.html\" title=\"struct core::cell::RefCell\">RefCell</a>&lt;T&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if the value in either <code>RefCell</code> is currently mutably borrowed.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cmp.rs.html#264\">Source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>!=</code>. The default implementation is almost always sufficient,\nand should not be overridden without very good reason.</div></details></div></details>","PartialEq","smithay::wayland::commit_timing::CommitTimerStateUserData","smithay::wayland::fractional_scale::FractionalScaleStateUserData"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialOrd-for-RefCell%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.10.0\">1.10.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cell.rs.html#1352\">Source</a></span><a href=\"#impl-PartialOrd-for-RefCell%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html\" title=\"trait core::cmp::PartialOrd\">PartialOrd</a> for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/cell/struct.RefCell.html\" title=\"struct core::cell::RefCell\">RefCell</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html\" title=\"trait core::cmp::PartialOrd\">PartialOrd</a> + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.partial_cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/cell.rs.html#1357\">Source</a><a href=\"#method.partial_cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\" class=\"fn\">partial_cmp</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/cell/struct.RefCell.html\" title=\"struct core::cell::RefCell\">RefCell</a>&lt;T&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a>&gt;</h4></section></summary><div class=\"docblock\"><h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if the value in either <code>RefCell</code> is currently mutably borrowed.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.lt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/cell.rs.html#1365\">Source</a><a href=\"#method.lt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.lt\" class=\"fn\">lt</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/cell/struct.RefCell.html\" title=\"struct core::cell::RefCell\">RefCell</a>&lt;T&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><h5 id=\"panics-1\"><a class=\"doc-anchor\" href=\"#panics-1\">§</a>Panics</h5>\n<p>Panics if the value in either <code>RefCell</code> is currently mutably borrowed.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.le\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/cell.rs.html#1373\">Source</a><a href=\"#method.le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.le\" class=\"fn\">le</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/cell/struct.RefCell.html\" title=\"struct core::cell::RefCell\">RefCell</a>&lt;T&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><h5 id=\"panics-2\"><a class=\"doc-anchor\" href=\"#panics-2\">§</a>Panics</h5>\n<p>Panics if the value in either <code>RefCell</code> is currently mutably borrowed.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.gt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/cell.rs.html#1381\">Source</a><a href=\"#method.gt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.gt\" class=\"fn\">gt</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/cell/struct.RefCell.html\" title=\"struct core::cell::RefCell\">RefCell</a>&lt;T&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><h5 id=\"panics-3\"><a class=\"doc-anchor\" href=\"#panics-3\">§</a>Panics</h5>\n<p>Panics if the value in either <code>RefCell</code> is currently mutably borrowed.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ge\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/cell.rs.html#1389\">Source</a><a href=\"#method.ge\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.PartialOrd.html#method.ge\" class=\"fn\">ge</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/cell/struct.RefCell.html\" title=\"struct core::cell::RefCell\">RefCell</a>&lt;T&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><h5 id=\"panics-4\"><a class=\"doc-anchor\" href=\"#panics-4\">§</a>Panics</h5>\n<p>Panics if the value in either <code>RefCell</code> is currently mutably borrowed.</p>\n</div></details></div></details>","PartialOrd","smithay::wayland::commit_timing::CommitTimerStateUserData","smithay::wayland::fractional_scale::FractionalScaleStateUserData"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-RefCell%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/cell.rs.html#1276\">Source</a><a href=\"#impl-RefCell%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/cell/struct.RefCell.html\" title=\"struct core::cell::RefCell\">RefCell</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.take\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.50.0\">1.50.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cell.rs.html#1295\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/cell/struct.RefCell.html#tymethod.take\" class=\"fn\">take</a>(&amp;self) -&gt; T</h4></section><span class=\"item-info\"><div class=\"stab portability\">Available on <strong>crate feature <code>desktop</code></strong> only.</div></span></summary><div class=\"docblock\"><p>Takes the wrapped value, leaving <code>Default::default()</code> in its place.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if the value is currently borrowed.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::cell::RefCell;\n\n<span class=\"kw\">let </span>c = RefCell::new(<span class=\"number\">5</span>);\n<span class=\"kw\">let </span>five = c.take();\n\n<span class=\"macro\">assert_eq!</span>(five, <span class=\"number\">5</span>);\n<span class=\"macro\">assert_eq!</span>(c.into_inner(), <span class=\"number\">0</span>);</code></pre></div></div></details></div></details>",0,"smithay::wayland::commit_timing::CommitTimerStateUserData","smithay::wayland::fractional_scale::FractionalScaleStateUserData"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-RefCell%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/cell.rs.html#830\">Source</a><a href=\"#impl-RefCell%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/cell/struct.RefCell.html\" title=\"struct core::cell::RefCell\">RefCell</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.new\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.24.0\">1.0.0 (const: 1.24.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cell.rs.html#843\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/nightly/core/cell/struct.RefCell.html#tymethod.new\" class=\"fn\">new</a>(value: T) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/cell/struct.RefCell.html\" title=\"struct core::cell::RefCell\">RefCell</a>&lt;T&gt;</h4></section><span class=\"item-info\"><div class=\"stab portability\">Available on <strong>crate feature <code>desktop</code></strong> only.</div></span></summary><div class=\"docblock\"><p>Creates a new <code>RefCell</code> containing <code>value</code>.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::cell::RefCell;\n\n<span class=\"kw\">let </span>c = RefCell::new(<span class=\"number\">5</span>);</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_inner\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.83.0\">1.0.0 (const: 1.83.0)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cell.rs.html#867\">Source</a></span><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/nightly/core/cell/struct.RefCell.html#tymethod.into_inner\" class=\"fn\">into_inner</a>(self) -&gt; T</h4></section><span class=\"item-info\"><div class=\"stab portability\">Available on <strong>crate feature <code>desktop</code></strong> only.</div></span></summary><div class=\"docblock\"><p>Consumes the <code>RefCell</code>, returning the wrapped value.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::cell::RefCell;\n\n<span class=\"kw\">let </span>c = RefCell::new(<span class=\"number\">5</span>);\n\n<span class=\"kw\">let </span>five = c.into_inner();</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.replace\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.24.0, const unstable\">1.24.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/137844\" title=\"Tracking issue for const_ref_cell\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cell.rs.html#896\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/cell/struct.RefCell.html#tymethod.replace\" class=\"fn\">replace</a>(&amp;self, t: T) -&gt; T</h4></section><span class=\"item-info\"><div class=\"stab portability\">Available on <strong>crate feature <code>desktop</code></strong> only.</div></span></summary><div class=\"docblock\"><p>Replaces the wrapped value with a new one, returning the old value,\nwithout deinitializing either one.</p>\n<p>This function corresponds to <a href=\"../mem/fn.replace.html\"><code>std::mem::replace</code></a>.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if the value is currently borrowed.</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::cell::RefCell;\n<span class=\"kw\">let </span>cell = RefCell::new(<span class=\"number\">5</span>);\n<span class=\"kw\">let </span>old_value = cell.replace(<span class=\"number\">6</span>);\n<span class=\"macro\">assert_eq!</span>(old_value, <span class=\"number\">5</span>);\n<span class=\"macro\">assert_eq!</span>(cell, RefCell::new(<span class=\"number\">6</span>));</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.replace_with\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.35.0\">1.35.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cell.rs.html#919\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/cell/struct.RefCell.html#tymethod.replace_with\" class=\"fn\">replace_with</a>&lt;F&gt;(&amp;self, f: F) -&gt; T<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut T</a>) -&gt; T,</div></h4></section><span class=\"item-info\"><div class=\"stab portability\">Available on <strong>crate feature <code>desktop</code></strong> only.</div></span></summary><div class=\"docblock\"><p>Replaces the wrapped value with a new one computed from <code>f</code>, returning\nthe old value, without deinitializing either one.</p>\n<h5 id=\"panics-1\"><a class=\"doc-anchor\" href=\"#panics-1\">§</a>Panics</h5>\n<p>Panics if the value is currently borrowed.</p>\n<h5 id=\"examples-3\"><a class=\"doc-anchor\" href=\"#examples-3\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::cell::RefCell;\n<span class=\"kw\">let </span>cell = RefCell::new(<span class=\"number\">5</span>);\n<span class=\"kw\">let </span>old_value = cell.replace_with(|<span class=\"kw-2\">&amp;mut </span>old| old + <span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>(old_value, <span class=\"number\">5</span>);\n<span class=\"macro\">assert_eq!</span>(cell, RefCell::new(<span class=\"number\">6</span>));</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.swap\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.24.0, const unstable\">1.24.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/137844\" title=\"Tracking issue for const_ref_cell\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cell.rs.html#948\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/cell/struct.RefCell.html#tymethod.swap\" class=\"fn\">swap</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/cell/struct.RefCell.html\" title=\"struct core::cell::RefCell\">RefCell</a>&lt;T&gt;)</h4></section><span class=\"item-info\"><div class=\"stab portability\">Available on <strong>crate feature <code>desktop</code></strong> only.</div></span></summary><div class=\"docblock\"><p>Swaps the wrapped value of <code>self</code> with the wrapped value of <code>other</code>,\nwithout deinitializing either one.</p>\n<p>This function corresponds to <a href=\"../mem/fn.swap.html\"><code>std::mem::swap</code></a>.</p>\n<h5 id=\"panics-2\"><a class=\"doc-anchor\" href=\"#panics-2\">§</a>Panics</h5>\n<p>Panics if the value in either <code>RefCell</code> is currently borrowed, or\nif <code>self</code> and <code>other</code> point to the same <code>RefCell</code>.</p>\n<h5 id=\"examples-4\"><a class=\"doc-anchor\" href=\"#examples-4\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::cell::RefCell;\n<span class=\"kw\">let </span>c = RefCell::new(<span class=\"number\">5</span>);\n<span class=\"kw\">let </span>d = RefCell::new(<span class=\"number\">6</span>);\nc.swap(<span class=\"kw-2\">&amp;</span>d);\n<span class=\"macro\">assert_eq!</span>(c, RefCell::new(<span class=\"number\">6</span>));\n<span class=\"macro\">assert_eq!</span>(d, RefCell::new(<span class=\"number\">5</span>));</code></pre></div></div></details></div></details>",0,"smithay::wayland::commit_timing::CommitTimerStateUserData","smithay::wayland::fractional_scale::FractionalScaleStateUserData"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-RefCell%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/cell.rs.html#953\">Source</a><a href=\"#impl-RefCell%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/cell/struct.RefCell.html\" title=\"struct core::cell::RefCell\">RefCell</a>&lt;T&gt;<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.borrow\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const unstable\">1.0.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/137844\" title=\"Tracking issue for const_ref_cell\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cell.rs.html#989\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/cell/struct.RefCell.html#tymethod.borrow\" class=\"fn\">borrow</a>(&amp;self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/cell/struct.Ref.html\" title=\"struct core::cell::Ref\">Ref</a>&lt;'_, T&gt;</h4></section><span class=\"item-info\"><div class=\"stab portability\">Available on <strong>crate feature <code>desktop</code></strong> only.</div></span></summary><div class=\"docblock\"><p>Immutably borrows the wrapped value.</p>\n<p>The borrow lasts until the returned <code>Ref</code> exits scope. Multiple\nimmutable borrows can be taken out at the same time.</p>\n<h5 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h5>\n<p>Panics if the value is currently mutably borrowed. For a non-panicking variant, use\n<a href=\"#method.try_borrow\"><code>try_borrow</code></a>.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::cell::RefCell;\n\n<span class=\"kw\">let </span>c = RefCell::new(<span class=\"number\">5</span>);\n\n<span class=\"kw\">let </span>borrowed_five = c.borrow();\n<span class=\"kw\">let </span>borrowed_five2 = c.borrow();</code></pre></div>\n<p>An example of panic:</p>\n\n<div class=\"example-wrap should_panic\"><a href=\"#\" class=\"tooltip\" title=\"This example panics\">ⓘ</a><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::cell::RefCell;\n\n<span class=\"kw\">let </span>c = RefCell::new(<span class=\"number\">5</span>);\n\n<span class=\"kw\">let </span>m = c.borrow_mut();\n<span class=\"kw\">let </span>b = c.borrow(); <span class=\"comment\">// this causes a panic</span></code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_borrow\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.13.0, const unstable\">1.13.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/137844\" title=\"Tracking issue for const_ref_cell\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cell.rs.html#1025\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/cell/struct.RefCell.html#tymethod.try_borrow\" class=\"fn\">try_borrow</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/cell/struct.Ref.html\" title=\"struct core::cell::Ref\">Ref</a>&lt;'_, T&gt;, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/cell/struct.BorrowError.html\" title=\"struct core::cell::BorrowError\">BorrowError</a>&gt;</h4></section><span class=\"item-info\"><div class=\"stab portability\">Available on <strong>crate feature <code>desktop</code></strong> only.</div></span></summary><div class=\"docblock\"><p>Immutably borrows the wrapped value, returning an error if the value is currently mutably\nborrowed.</p>\n<p>The borrow lasts until the returned <code>Ref</code> exits scope. Multiple immutable borrows can be\ntaken out at the same time.</p>\n<p>This is the non-panicking variant of <a href=\"#method.borrow\"><code>borrow</code></a>.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::cell::RefCell;\n\n<span class=\"kw\">let </span>c = RefCell::new(<span class=\"number\">5</span>);\n\n{\n    <span class=\"kw\">let </span>m = c.borrow_mut();\n    <span class=\"macro\">assert!</span>(c.try_borrow().is_err());\n}\n\n{\n    <span class=\"kw\">let </span>m = c.borrow();\n    <span class=\"macro\">assert!</span>(c.try_borrow().is_ok());\n}</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.borrow_mut\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const unstable\">1.0.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/137844\" title=\"Tracking issue for const_ref_cell\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cell.rs.html#1087\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/cell/struct.RefCell.html#tymethod.borrow_mut\" class=\"fn\">borrow_mut</a>(&amp;self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/cell/struct.RefMut.html\" title=\"struct core::cell::RefMut\">RefMut</a>&lt;'_, T&gt;</h4></section><span class=\"item-info\"><div class=\"stab portability\">Available on <strong>crate feature <code>desktop</code></strong> only.</div></span></summary><div class=\"docblock\"><p>Mutably borrows the wrapped value.</p>\n<p>The borrow lasts until the returned <code>RefMut</code> or all <code>RefMut</code>s derived\nfrom it exit scope. The value cannot be borrowed while this borrow is\nactive.</p>\n<h5 id=\"panics-1\"><a class=\"doc-anchor\" href=\"#panics-1\">§</a>Panics</h5>\n<p>Panics if the value is currently borrowed. For a non-panicking variant, use\n<a href=\"#method.try_borrow_mut\"><code>try_borrow_mut</code></a>.</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::cell::RefCell;\n\n<span class=\"kw\">let </span>c = RefCell::new(<span class=\"string\">\"hello\"</span>.to_owned());\n\n<span class=\"kw-2\">*</span>c.borrow_mut() = <span class=\"string\">\"bonjour\"</span>.to_owned();\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">&amp;*</span>c.borrow(), <span class=\"string\">\"bonjour\"</span>);</code></pre></div>\n<p>An example of panic:</p>\n\n<div class=\"example-wrap should_panic\"><a href=\"#\" class=\"tooltip\" title=\"This example panics\">ⓘ</a><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::cell::RefCell;\n\n<span class=\"kw\">let </span>c = RefCell::new(<span class=\"number\">5</span>);\n<span class=\"kw\">let </span>m = c.borrow();\n\n<span class=\"kw\">let </span>b = c.borrow_mut(); <span class=\"comment\">// this causes a panic</span></code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_borrow_mut\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.13.0, const unstable\">1.13.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/137844\" title=\"Tracking issue for const_ref_cell\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cell.rs.html#1120\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/cell/struct.RefCell.html#tymethod.try_borrow_mut\" class=\"fn\">try_borrow_mut</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/cell/struct.RefMut.html\" title=\"struct core::cell::RefMut\">RefMut</a>&lt;'_, T&gt;, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/cell/struct.BorrowMutError.html\" title=\"struct core::cell::BorrowMutError\">BorrowMutError</a>&gt;</h4></section><span class=\"item-info\"><div class=\"stab portability\">Available on <strong>crate feature <code>desktop</code></strong> only.</div></span></summary><div class=\"docblock\"><p>Mutably borrows the wrapped value, returning an error if the value is currently borrowed.</p>\n<p>The borrow lasts until the returned <code>RefMut</code> or all <code>RefMut</code>s derived\nfrom it exit scope. The value cannot be borrowed while this borrow is\nactive.</p>\n<p>This is the non-panicking variant of <a href=\"#method.borrow_mut\"><code>borrow_mut</code></a>.</p>\n<h5 id=\"examples-3\"><a class=\"doc-anchor\" href=\"#examples-3\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::cell::RefCell;\n\n<span class=\"kw\">let </span>c = RefCell::new(<span class=\"number\">5</span>);\n\n{\n    <span class=\"kw\">let </span>m = c.borrow();\n    <span class=\"macro\">assert!</span>(c.try_borrow_mut().is_err());\n}\n\n<span class=\"macro\">assert!</span>(c.try_borrow_mut().is_ok());</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_ptr\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.12.0, const unstable\">1.12.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/137844\" title=\"Tracking issue for const_ref_cell\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cell.rs.html#1157\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/cell/struct.RefCell.html#tymethod.as_ptr\" class=\"fn\">as_ptr</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.pointer.html\">*mut T</a></h4></section><span class=\"item-info\"><div class=\"stab portability\">Available on <strong>crate feature <code>desktop</code></strong> only.</div></span></summary><div class=\"docblock\"><p>Returns a raw pointer to the underlying data in this cell.</p>\n<h5 id=\"examples-4\"><a class=\"doc-anchor\" href=\"#examples-4\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::cell::RefCell;\n\n<span class=\"kw\">let </span>c = RefCell::new(<span class=\"number\">5</span>);\n\n<span class=\"kw\">let </span>ptr = c.as_ptr();</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_mut\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.11.0, const unstable\">1.11.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/137844\" title=\"Tracking issue for const_ref_cell\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cell.rs.html#1195\">Source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/core/cell/struct.RefCell.html#tymethod.get_mut\" class=\"fn\">get_mut</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut T</a></h4></section><span class=\"item-info\"><div class=\"stab portability\">Available on <strong>crate feature <code>desktop</code></strong> only.</div></span></summary><div class=\"docblock\"><p>Returns a mutable reference to the underlying data.</p>\n<p>Since this method borrows <code>RefCell</code> mutably, it is statically guaranteed\nthat no borrows to the underlying data exist. The dynamic checks inherent\nin <a href=\"https://doc.rust-lang.org/nightly/core/cell/struct.RefCell.html#method.borrow_mut\" title=\"method core::cell::RefCell::borrow_mut\"><code>borrow_mut</code></a> and most other methods of <code>RefCell</code> are therefore\nunnecessary. Note that this method does not reset the borrowing state if borrows were previously leaked\n(e.g., via <a href=\"https://doc.rust-lang.org/nightly/core/mem/fn.forget.html\" title=\"fn core::mem::forget\"><code>forget()</code></a> on a <a href=\"https://doc.rust-lang.org/nightly/core/cell/struct.Ref.html\" title=\"struct core::cell::Ref\"><code>Ref</code></a> or <a href=\"https://doc.rust-lang.org/nightly/core/cell/struct.RefMut.html\" title=\"struct core::cell::RefMut\"><code>RefMut</code></a>). For that purpose,\nconsider using the unstable <a href=\"https://doc.rust-lang.org/nightly/core/cell/struct.RefCell.html#method.undo_leak\" title=\"method core::cell::RefCell::undo_leak\"><code>undo_leak</code></a> method.</p>\n<p>This method can only be called if <code>RefCell</code> can be mutably borrowed,\nwhich in general is only the case directly after the <code>RefCell</code> has\nbeen created. In these situations, skipping the aforementioned dynamic\nborrowing checks may yield better ergonomics and runtime-performance.</p>\n<p>In most situations where <code>RefCell</code> is used, it can’t be borrowed mutably.\nUse <a href=\"https://doc.rust-lang.org/nightly/core/cell/struct.RefCell.html#method.borrow_mut\" title=\"method core::cell::RefCell::borrow_mut\"><code>borrow_mut</code></a> to get mutable access to the underlying data then.</p>\n<h5 id=\"examples-5\"><a class=\"doc-anchor\" href=\"#examples-5\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::cell::RefCell;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>c = RefCell::new(<span class=\"number\">5</span>);\n<span class=\"kw-2\">*</span>c.get_mut() += <span class=\"number\">1</span>;\n\n<span class=\"macro\">assert_eq!</span>(c, RefCell::new(<span class=\"number\">6</span>));</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.undo_leak\" class=\"method\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/cell.rs.html#1222\">Source</a><h4 class=\"code-header\">pub const fn <a href=\"https://doc.rust-lang.org/nightly/core/cell/struct.RefCell.html#tymethod.undo_leak\" class=\"fn\">undo_leak</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut T</a></h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>cell_leak</code>)</span></div><div class=\"stab portability\">Available on <strong>crate feature <code>desktop</code></strong> only.</div></span></summary><div class=\"docblock\"><p>Undo the effect of leaked guards on the borrow state of the <code>RefCell</code>.</p>\n<p>This call is similar to <a href=\"https://doc.rust-lang.org/nightly/core/cell/struct.RefCell.html#method.get_mut\" title=\"method core::cell::RefCell::get_mut\"><code>get_mut</code></a> but more specialized. It borrows <code>RefCell</code> mutably to\nensure no borrows exist and then resets the state tracking shared borrows. This is relevant\nif some <code>Ref</code> or <code>RefMut</code> borrows have been leaked.</p>\n<h5 id=\"examples-6\"><a class=\"doc-anchor\" href=\"#examples-6\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(cell_leak)]\n</span><span class=\"kw\">use </span>std::cell::RefCell;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>c = RefCell::new(<span class=\"number\">0</span>);\nstd::mem::forget(c.borrow_mut());\n\n<span class=\"macro\">assert!</span>(c.try_borrow().is_err());\nc.undo_leak();\n<span class=\"macro\">assert!</span>(c.try_borrow().is_ok());</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_borrow_unguarded\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.37.0, const unstable\">1.37.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/137844\" title=\"Tracking issue for const_ref_cell\">unstable</a>)</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cell.rs.html#1257\">Source</a></span><h4 class=\"code-header\">pub unsafe fn <a href=\"https://doc.rust-lang.org/nightly/core/cell/struct.RefCell.html#tymethod.try_borrow_unguarded\" class=\"fn\">try_borrow_unguarded</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;T</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/cell/struct.BorrowError.html\" title=\"struct core::cell::BorrowError\">BorrowError</a>&gt;</h4></section><span class=\"item-info\"><div class=\"stab portability\">Available on <strong>crate feature <code>desktop</code></strong> only.</div></span></summary><div class=\"docblock\"><p>Immutably borrows the wrapped value, returning an error if the value is\ncurrently mutably borrowed.</p>\n<h5 id=\"safety\"><a class=\"doc-anchor\" href=\"#safety\">§</a>Safety</h5>\n<p>Unlike <code>RefCell::borrow</code>, this method is unsafe because it does not\nreturn a <code>Ref</code>, thus leaving the borrow flag untouched. Mutably\nborrowing the <code>RefCell</code> while the reference returned by this method\nis alive is undefined behavior.</p>\n<h5 id=\"examples-7\"><a class=\"doc-anchor\" href=\"#examples-7\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::cell::RefCell;\n\n<span class=\"kw\">let </span>c = RefCell::new(<span class=\"number\">5</span>);\n\n{\n    <span class=\"kw\">let </span>m = c.borrow_mut();\n    <span class=\"macro\">assert!</span>(<span class=\"kw\">unsafe </span>{ c.try_borrow_unguarded() }.is_err());\n}\n\n{\n    <span class=\"kw\">let </span>m = c.borrow();\n    <span class=\"macro\">assert!</span>(<span class=\"kw\">unsafe </span>{ c.try_borrow_unguarded() }.is_ok());\n}</code></pre></div></div></details></div></details>",0,"smithay::wayland::commit_timing::CommitTimerStateUserData","smithay::wayland::fractional_scale::FractionalScaleStateUserData"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-RelativeEq-for-RefCell%3CT%3E\" class=\"impl\"><a href=\"#impl-RelativeEq-for-RefCell%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; RelativeEq for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/cell/struct.RefCell.html\" title=\"struct core::cell::RefCell\">RefCell</a>&lt;T&gt;<div class=\"where\">where\n    T: RelativeEq + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.default_max_relative\" class=\"method trait-impl\"><a href=\"#method.default_max_relative\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">default_max_relative</a>() -&gt; &lt;T as AbsDiffEq&gt;::Epsilon</h4></section></summary><div class='docblock'>The default relative tolerance for testing values that are far-apart. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.relative_eq\" class=\"method trait-impl\"><a href=\"#method.relative_eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">relative_eq</a>(\n    &amp;self,\n    other: &amp;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/cell/struct.RefCell.html\" title=\"struct core::cell::RefCell\">RefCell</a>&lt;T&gt;,\n    epsilon: &lt;T as AbsDiffEq&gt;::Epsilon,\n    max_relative: &lt;T as AbsDiffEq&gt;::Epsilon,\n) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>A test for equality that uses a relative comparison if the values are far apart.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.relative_ne\" class=\"method trait-impl\"><a href=\"#method.relative_ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">relative_ne</a>(\n    &amp;self,\n    other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>,\n    epsilon: Self::Epsilon,\n    max_relative: Self::Epsilon,\n) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>The inverse of [<code>RelativeEq::relative_eq</code>].</div></details></div></details>","RelativeEq","smithay::wayland::commit_timing::CommitTimerStateUserData","smithay::wayland::fractional_scale::FractionalScaleStateUserData"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-UlpsEq-for-RefCell%3CT%3E\" class=\"impl\"><a href=\"#impl-UlpsEq-for-RefCell%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; UlpsEq for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/cell/struct.RefCell.html\" title=\"struct core::cell::RefCell\">RefCell</a>&lt;T&gt;<div class=\"where\">where\n    T: UlpsEq + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.default_max_ulps\" class=\"method trait-impl\"><a href=\"#method.default_max_ulps\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">default_max_ulps</a>() -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a></h4></section></summary><div class='docblock'>The default ULPs to tolerate when testing values that are far-apart. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ulps_eq\" class=\"method trait-impl\"><a href=\"#method.ulps_eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">ulps_eq</a>(\n    &amp;self,\n    other: &amp;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/cell/struct.RefCell.html\" title=\"struct core::cell::RefCell\">RefCell</a>&lt;T&gt;,\n    epsilon: &lt;T as AbsDiffEq&gt;::Epsilon,\n    max_ulps: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>,\n) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>A test for equality that uses units in the last place (ULP) if the values are far apart.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ulps_ne\" class=\"method trait-impl\"><a href=\"#method.ulps_ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">ulps_ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Rhs</a>, epsilon: Self::Epsilon, max_ulps: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>The inverse of [<code>UlpsEq::ulps_eq</code>].</div></details></div></details>","UlpsEq","smithay::wayland::commit_timing::CommitTimerStateUserData","smithay::wayland::fractional_scale::FractionalScaleStateUserData"],["<section id=\"impl-CoerceUnsized%3CRefCell%3CU%3E%3E-for-RefCell%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/cell.rs.html#1415\">Source</a><a href=\"#impl-CoerceUnsized%3CRefCell%3CU%3E%3E-for-RefCell%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/unsize/trait.CoerceUnsized.html\" title=\"trait core::ops::unsize::CoerceUnsized\">CoerceUnsized</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/cell/struct.RefCell.html\" title=\"struct core::cell::RefCell\">RefCell</a>&lt;U&gt;&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/cell/struct.RefCell.html\" title=\"struct core::cell::RefCell\">RefCell</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/unsize/trait.CoerceUnsized.html\" title=\"trait core::ops::unsize::CoerceUnsized\">CoerceUnsized</a>&lt;U&gt;,</div></h3></section>","CoerceUnsized<RefCell<U>>","smithay::wayland::commit_timing::CommitTimerStateUserData","smithay::wayland::fractional_scale::FractionalScaleStateUserData"],["<section id=\"impl-Eq-for-RefCell%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.2.0\">1.2.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cell.rs.html#1349\">Source</a></span><a href=\"#impl-Eq-for-RefCell%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/cell/struct.RefCell.html\" title=\"struct core::cell::RefCell\">RefCell</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h3></section>","Eq","smithay::wayland::commit_timing::CommitTimerStateUserData","smithay::wayland::fractional_scale::FractionalScaleStateUserData"],["<section id=\"impl-PinCoerceUnsized-for-RefCell%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/cell.rs.html#2591\">Source</a><a href=\"#impl-PinCoerceUnsized-for-RefCell%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/pin/trait.PinCoerceUnsized.html\" title=\"trait core::pin::PinCoerceUnsized\">PinCoerceUnsized</a> for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/cell/struct.RefCell.html\" title=\"struct core::cell::RefCell\">RefCell</a>&lt;T&gt;<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h3></section>","PinCoerceUnsized","smithay::wayland::commit_timing::CommitTimerStateUserData","smithay::wayland::fractional_scale::FractionalScaleStateUserData"],["<section id=\"impl-Send-for-RefCell%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cell.rs.html#1301\">Source</a></span><a href=\"#impl-Send-for-RefCell%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/cell/struct.RefCell.html\" title=\"struct core::cell::RefCell\">RefCell</a>&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h3></section>","Send","smithay::wayland::commit_timing::CommitTimerStateUserData","smithay::wayland::fractional_scale::FractionalScaleStateUserData"],["<section id=\"impl-Sync-for-RefCell%3CT%3E\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/cell.rs.html#1304\">Source</a></span><a href=\"#impl-Sync-for-RefCell%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; !<a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/cell/struct.RefCell.html\" title=\"struct core::cell::RefCell\">RefCell</a>&lt;T&gt;<div class=\"where\">where\n    T: ?<a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h3></section>","Sync","smithay::wayland::commit_timing::CommitTimerStateUserData","smithay::wayland::fractional_scale::FractionalScaleStateUserData"]]]]);
    if (window.register_type_impls) {
        window.register_type_impls(type_impls);
    } else {
        window.pending_type_impls = type_impls;
    }
})()
//{"start":55,"fragment_lengths":[67200]}